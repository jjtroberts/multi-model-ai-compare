# docker-compose.yml - Production deployment setup
version: '3.8'

services:
  # Main application
  multi-model-ai:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${HOST_PORT:-8501}:8501"
    environment:
      # API Keys (set these in .env file)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      
      # Application configuration
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-300}
      
      # API configuration
      - CLAUDE_TIMEOUT=${CLAUDE_TIMEOUT:-60}
      - OPENAI_TIMEOUT=${OPENAI_TIMEOUT:-60}
      - GEMINI_TIMEOUT=${GEMINI_TIMEOUT:-60}
      
      # Security settings
      - MAX_SESSION_DURATION=${MAX_SESSION_DURATION:-3600}
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ai-comparison-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-comparison.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.services.ai-comparison.loadbalancer.server.port=8501"

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-comparison-network

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - multi-model-ai
    restart: unless-stopped
    networks:
      - ai-comparison-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - ai-comparison-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-comparison-network
    profiles:
      - monitoring

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  nginx-logs:

networks:
  ai-comparison-network:
    driver: bridge